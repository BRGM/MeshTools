# see https://docs.gitlab.com/ce/ci/yaml/README.html for all available options

image: docker:stable

services:
  - docker:stable-dind

variables:
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
  # and https://gitlab.inria.fr/charms/ComPASS/issues/72
  DOCKER_DRIVER: overlay2
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  # cf. https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_TLS_CERTDIR: "/certs"
  # Project specifc variables
  CI_REGISTRY_IMAGE: registry.gitlab.inria.fr/charms/meshtools
  WHEEL_PRERELTAG: ".dev_$CI_COMMIT_REF_SLUG"

# this sequence will force to have unit tests in docker image. Making unit test before build docker image help remove unit test, but need to split dockerfile multijob build.
stages:
    - build_docker_environments
    - build
    - test
    - documentation
    - release

before_script:
  # - echo "Preparing build..."
  # - docker info
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.inria.fr
   

after_script:
  - echo "After script section"
  - echo "For example you might do some cleanup here"

# here we build specific docker environments
# (cf. docker/README.md)
build_docker_environments:
  stage: build_docker_environments
  tags:
    - build
  only:
    - /^docker_evt_.*$/
  script:
    - docker build --force-rm --cache-from $CI_REGISTRY_IMAGE/build-environment --pull --tag $CI_REGISTRY_IMAGE/build-environment docker/build
    - docker push $CI_REGISTRY_IMAGE/build-environment
    - docker build --force-rm --cache-from $CI_REGISTRY_IMAGE/run-environment --pull --tag $CI_REGISTRY_IMAGE/run-environment docker/run
    - docker push $CI_REGISTRY_IMAGE/run-environment
    - docker build --force-rm --cache-from $CI_REGISTRY_IMAGE/doc-environment --pull --tag $CI_REGISTRY_IMAGE/doc-environment docker/doc
    - docker push $CI_REGISTRY_IMAGE/doc-environment

build:
  stage: build
  tags:
    - build
  script:
    - mkdir -p wheels
    - echo $PWD:/localfs
    - echo $WHEEL_PRERELTAG
    - docker run --rm -v $PWD:/localfs $CI_REGISTRY_IMAGE/build-environment python3 setup.py egg_info --tag-build=$WHEEL_PRERELTAG bdist_wheel -d wheels
  artifacts:
    paths:
    - wheels

integration_test:
  stage: test
  tags:
    - test
  script:
    - echo "integration test shall not be run as root"
    #- docker run --rm -v $PWD:/localfs $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG MeshTools/vtkwriters.py

#release only on master and if tests passed, maybe another tag should be the number in Git Tag for master! and add in only : Tag: to release only when master is tagged.
release:
  stage: release
  tags:
    - build
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - master
  when: on_success

tag-release:
  stage: release
  tags:
    - build
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  only:
    - tags
  when: on_success

pages:
  stage: documentation
  tags:
    - build
  script:
    - mkdir -p public/wheels
    - cp -v wheels/*.whl public/wheels
    - docker run --rm -v $PWD:/localfs $CI_REGISTRY_IMAGE/doc-environment docs/generate_doc.bash $WHEEL_PRERELTAG 
  artifacts:
    paths:
    - public

